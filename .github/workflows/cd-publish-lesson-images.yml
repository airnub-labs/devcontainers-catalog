name: CD - Build & Publish Lesson Images

on:
  push:
    branches:
      - main
    paths:
      - "schemas/**"
      - "tools/generate-lesson/**"
      - "examples/lesson-manifests/**"
      - "services/**"
      - "images/presets/**"
      - "Makefile"
  workflow_dispatch:

jobs:
  manifest-list:
    name: Discover lesson manifests
    runs-on: ubuntu-latest
    outputs:
      manifests: ${{ steps.collect.outputs.manifests }}
    steps:
      - uses: actions/checkout@v4
      - id: collect
        run: |
          set -Eeuo pipefail
          mapfile -t files < <(find examples/lesson-manifests -maxdepth 1 -type f \( -name '*.yml' -o -name '*.yaml' \) -print | sort)
          if [ ${#files[@]} -eq 0 ]; then
            echo "manifests=[]" >> "$GITHUB_OUTPUT"
          else
            printf '%s\n' "${files[@]}" | jq -R . | jq -s --compact-output '.' | {
              read json
              printf 'manifests=%s\n' "$json" >> "$GITHUB_OUTPUT"
            }
          fi

  publish:
    name: Build and publish lesson image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: manifest-list
    strategy:
      fail-fast: false
      matrix:
        manifest: ${{ fromJSON(needs.manifest-list.outputs.manifests) }}
    env:
      LESSON_MANIFEST: ${{ matrix.manifest }}
      LESSON_TAG: ubuntu-24.04
      REGISTRY: ghcr.io/airnub-labs/templates
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install tooling
        run: |
          set -Eeuo pipefail
          python -m pip install --upgrade pip
          python -m pip install ./tools/generate-lesson jsonschema[yaml]

      - name: Validate lesson manifests
        run: |
          python - <<'PY'
import json
from pathlib import Path

import yaml
from jsonschema import Draft202012Validator

schema = json.loads(Path("schemas/lesson-env.schema.json").read_text(encoding="utf-8"))
validator = Draft202012Validator(schema)

manifests_dir = Path("examples/lesson-manifests")
errors = []
for manifest_path in sorted(manifests_dir.glob("*.y*ml")):
    data = yaml.safe_load(manifest_path.read_text(encoding="utf-8"))
    for error in validator.iter_errors(data):
        errors.append(f"{manifest_path}: {error.message}")

if errors:
    for err in errors:
        print(err)
    raise SystemExit(1)
PY

      - name: Generate lesson build context
        run: |
          set -Eeuo pipefail
          make gen LESSON_MANIFEST=${{ env.LESSON_MANIFEST }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive slug
        id: slug
        run: |
          set -Eeuo pipefail
          python - <<'PY'
import os
import re
from pathlib import Path

import yaml

manifest_path = Path(os.environ["LESSON_MANIFEST"])
manifest = yaml.safe_load(manifest_path.read_text(encoding="utf-8"))
metadata = manifest["metadata"]

def slugify(value: str) -> str:
    value = re.sub(r"[^a-z0-9]+", "-", value.lower().strip())
    return value.strip('-') or "lesson"

slug = "-".join(slugify(str(metadata[key])) for key in ("org", "course", "lesson") if metadata.get(key))

with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as handle:
    handle.write(f"slug={slug}\n")
    handle.write(f"org={metadata['org']}\n")
    handle.write(f"course={metadata['course']}\n")
    handle.write(f"lesson={metadata['lesson']}\n")
PY

      - name: Validate aggregate compose
        run: |
          set -Eeuo pipefail
          FILE="images/presets/generated/${{ steps.slug.outputs.slug }}/docker-compose.classroom.yml"
          if [ -f "$FILE" ]; then
            docker compose -f "$FILE" config
          else
            echo "No aggregate compose generated for $FILE"
          fi

      - name: Build and push lesson image
        uses: docker/build-push-action@v6
        with:
          context: images/presets/generated/${{ steps.slug.outputs.slug }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/lessons/${{ steps.slug.outputs.slug }}:${{ env.LESSON_TAG }}
          build-args: |
            GIT_SHA=${{ github.sha }}
          provenance: false
          sbom: true
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Lesson image for ${{ steps.slug.outputs.org }}/${{ steps.slug.outputs.course }}/${{ steps.slug.outputs.lesson }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.airnub.lesson.org=${{ steps.slug.outputs.org }}
            org.airnub.lesson.course=${{ steps.slug.outputs.course }}
            org.airnub.lesson.lesson=${{ steps.slug.outputs.lesson }}
            org.airnub.lesson.schema=airnub.devcontainers/v1

  cli-e2e:
    name: CLI end-to-end smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install devc dependencies
        run: |
          set -Eeuo pipefail
          cd tools/airnub-devc
          npm install
          npm run build

      - name: CLI validation + generate + build + compose smoke
        env:
          TAG: ghcr.io/airnub-labs/templates/lessons/airnub-intro-ai-week02:ubuntu-24.04-airnub-intro-ai-week02-v1
        run: |
          set -Eeuo pipefail
          cd tools/airnub-devc
          node dist/index.js validate ../..//examples/lesson-manifests/intro-ai-week02.yaml
          node dist/index.js generate ../..//examples/lesson-manifests/intro-ai-week02.yaml \
            --out-images ../../images/presets/generated \
            --out-templates ../../templates/generated \
            --force \
            --git-sha ${GITHUB_SHA}
          node dist/index.js build \
            --ctx ../../images/presets/generated/airnub-intro-ai-week02 \
            --tag ${TAG} \
            --oci-output ../../dist/cli-e2e \
            --manifest ../..//examples/lesson-manifests/intro-ai-week02.yaml \
            --version v1 \
            --git-sha ${GITHUB_SHA}
          docker compose -f ../../images/presets/generated/airnub-intro-ai-week02/aggregate.compose.yml up -d --wait
          docker compose -f ../../images/presets/generated/airnub-intro-ai-week02/aggregate.compose.yml ps
          docker compose -f ../../images/presets/generated/airnub-intro-ai-week02/aggregate.compose.yml down
          rm -rf ../../dist/cli-e2e
