name: CI - Airnub CLI (E2E)
on:
  pull_request:
    paths:
      - "tools/airnub-devc/**"
      - "schemas/**"
      - "services/**"
      - "examples/lesson-manifests/**"
      - ".github/workflows/ci-cli-e2e.yml"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: 'npm'
          cache-dependency-path: tools/airnub-devc/package-lock.json

      - name: Build CLI
        working-directory: tools/airnub-devc
        run: |
          npm ci
          npm run build
          echo "$(pwd)/dist" >> $GITHUB_PATH

      - name: Validate example manifests
        run: |
          node tools/airnub-devc/dist/index.js validate examples/lesson-manifests --recursive

      - name: Generate preset and scaffold
        run: |
          node tools/airnub-devc/dist/index.js generate examples/lesson-manifests/intro-ai-week02.yaml --out images,preset,templates,scaffold

      - name: Doctor (aggregate compose & fragments)
        run: |
          node tools/airnub-devc/dist/index.js doctor

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Buildx setup
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push lesson image (throwaway namespace)
        run: |
          ID="my-school-intro-ai-week02"
          CTX="images/presets/generated/${ID}"
          TAG="ghcr.io/airnub-labs/ci-e2e-sandboxes/${ID}:ubuntu-24.04"
          node tools/airnub-devc/dist/index.js build --ctx "$CTX" --tag "$TAG"

      - name: Smoke up aggregate compose (if present)
        run: |
          set -Eeuo pipefail
          ID="my-school-intro-ai-week02"
          FILE="images/presets/generated/${ID}/aggregate.compose.yml"
          if [ -f "$FILE" ]; then
            docker compose -f "$FILE" up -d
            attempt=0
            while [ $attempt -lt 20 ]; do
              states=$(docker compose -f "$FILE" ps --format '{{.State}}')
              if echo "$states" | grep -qE '(unhealthy|exited|dead)'; then
                echo "[error] One or more services unhealthy" >&2
                docker compose -f "$FILE" ps
                exit 1
              fi
              if echo "$states" | grep -qi 'running'; then
                break
              fi
              attempt=$((attempt + 1))
              sleep 5
            done
            docker compose -f "$FILE" ps
            docker compose -f "$FILE" down -v
          else
            echo "No aggregate.compose.yml emitted; skipping."
          fi
