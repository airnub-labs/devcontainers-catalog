name: Publish Lesson Images

on:
  push:
    branches:
      - main
    paths:
      - "schemas/**"
      - "tools/generate-lesson/**"
      - "examples/lesson-manifests/**"
      - "services/**"
      - "images/presets/**"
      - "Makefile"
  workflow_dispatch:

env:
  LESSON_MANIFEST: examples/lesson-manifests/intro-ai-week02.yaml
  LESSON_TAG: ubuntu-24.04
  REGISTRY: ghcr.io/airnub-labs/templates

jobs:
  publish:
    name: Build and publish lesson image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install ./tools/generate-lesson jsonschema[yaml]

      - name: Validate lesson manifests
        run: |
          python - <<'PY'
import json
from pathlib import Path

import yaml
from jsonschema import Draft202012Validator

schema = json.loads(Path("schemas/lesson-env.schema.json").read_text(encoding="utf-8"))
validator = Draft202012Validator(schema)

manifests_dir = Path("examples/lesson-manifests")
errors = []
for manifest_path in sorted(manifests_dir.glob("*.y*ml")):
    data = yaml.safe_load(manifest_path.read_text(encoding="utf-8"))
    for error in validator.iter_errors(data):
        errors.append(f"{manifest_path}: {error.message}")

if errors:
    for err in errors:
        print(err)
    raise SystemExit(1)
PY

      - name: Generate lesson build context
        run: make gen LESSON_MANIFEST=${{ env.LESSON_MANIFEST }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive slug
        id: slug
        run: |
          python - <<'PY'
import os
import re
from pathlib import Path

import yaml

manifest_path = Path(os.environ["LESSON_MANIFEST"])
manifest = yaml.safe_load(manifest_path.read_text(encoding="utf-8"))
metadata = manifest["metadata"]

def slugify(value: str) -> str:
    value = re.sub(r"[^a-z0-9]+", "-", value.lower().strip())
    return value.strip('-') or "lesson"

slug = "-".join(slugify(str(metadata[key])) for key in ("org", "course", "lesson") if metadata.get(key))

with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as handle:
    handle.write(f"slug={slug}\n")
    handle.write(f"org={metadata['org']}\n")
    handle.write(f"course={metadata['course']}\n")
    handle.write(f"lesson={metadata['lesson']}\n")
PY

      - name: Validate aggregate compose
        run: |
          FILE="images/presets/generated/${{ steps.slug.outputs.slug }}/docker-compose.classroom.yml"
          if [ -f "$FILE" ]; then
            docker compose -f "$FILE" config
          else
            echo "No aggregate compose generated for $FILE"
          fi

      - name: Build and push lesson image
        uses: docker/build-push-action@v6
        with:
          context: images/presets/generated/${{ steps.slug.outputs.slug }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/lessons/${{ steps.slug.outputs.slug }}:${{ env.LESSON_TAG }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Lesson image for ${{ steps.slug.outputs.org }}/${{ steps.slug.outputs.course }}/${{ steps.slug.outputs.lesson }}
            edu.airnub.org=${{ steps.slug.outputs.org }}
            edu.airnub.course=${{ steps.slug.outputs.course }}
            edu.airnub.lesson=${{ steps.slug.outputs.lesson }}
            edu.airnub.schema=airnub.devcontainers/v1
